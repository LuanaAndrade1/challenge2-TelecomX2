{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HhvNXx9KysxJ"
      },
      "outputs": [],
      "source": [
        "import json\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_path = \"TelecomX_Data.json\"\n",
        "\n",
        "with open(data_path, \"r\", encoding=\"utf-8\") as f:\n",
        "    raw = json.load(f)\n",
        "\n",
        "df = pd.json_normalize(raw)\n",
        "df.head()"
      ],
      "metadata": {
        "id": "TVgIviQN0k0W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "58d34bba"
      },
      "source": [
        "file_name = list(uploaded.keys())[0]\n",
        "with open(file_name, 'r') as f:\n",
        "    data = json.load(f)\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "df = pd.json_normalize(df.to_dict('records'))\n",
        "\n",
        "relevant_cols = [\n",
        "    \"customerID\",\"Churn\",\n",
        "    \"customer.gender\",\"customer.SeniorCitizen\",\"customer.Partner\",\"customer.Dependents\",\"customer.tenure\",\n",
        "    \"phone.PhoneService\",\"phone.MultipleLines\",\n",
        "    \"internet.InternetService\",\"internet.OnlineSecurity\",\"internet.OnlineBackup\",\"internet.DeviceProtection\",\n",
        "    \"internet.TechSupport\",\"internet.StreamingTV\",\"internet.StreamingMovies\",\n",
        "    \"account.Contract\",\"account.PaperlessBilling\",\"account.PaymentMethod\",\n",
        "    \"account.Charges.Monthly\",\"account.Charges.Total\"\n",
        "]\n",
        "df = df[relevant_cols]\n",
        "\n",
        "df[\"Churn\"] = df[\"Churn\"].astype(str).str.strip()\n",
        "df = df[df[\"Churn\"].isin([\"Yes\",\"No\"])].copy()\n",
        "\n",
        "for col in [\"account.Charges.Monthly\",\"account.Charges.Total\"]:\n",
        "    df[col] = df[col].replace(r'^\\s*$', np.nan, regex=True)\n",
        "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
        "\n",
        "df.drop(columns=[\"customerID\"], inplace=True)\n",
        "\n",
        "display(df.head())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = df[\"Churn\"].map({\"No\":0,\"Yes\":1}).values\n",
        "X = df.drop(columns=[\"Churn\"]).copy()\n",
        "\n",
        "X = pd.get_dummies(X, drop_first=True)\n",
        "\n",
        "print(\"Shape final:\", X.shape)\n",
        "print(\"Proporção de Churn:\", y.mean())"
      ],
      "metadata": {
        "id": "9kmpAHAezPur"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_cols = [\"customer.tenure\",\"account.Charges.Monthly\",\"account.Charges.Total\"]\n",
        "corr = df[num_cols + [\"Churn\"]].copy()\n",
        "corr[\"Churn\"] = df[\"Churn\"].map({\"No\":0,\"Yes\":1})\n",
        "\n",
        "plt.figure(figsize=(6,5))\n",
        "sns.heatmap(corr.corr(), annot=True, cmap=\"coolwarm\")\n",
        "plt.title(\"Matriz de Correlação (numéricas)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "lbEHQRqZ1bYw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(5,4))\n",
        "sns.boxplot(x=\"Churn\", y=\"customer.tenure\", data=df)\n",
        "plt.title(\"Tempo de contrato × Churn\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(5,4))\n",
        "sns.boxplot(x=\"Churn\", y=\"account.Charges.Total\", data=df)\n",
        "plt.title(\"Total gasto × Churn\")\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(6,5))\n",
        "sns.scatterplot(x=\"customer.tenure\", y=\"account.Charges.Total\", hue=\"Churn\", data=df, alpha=0.7)\n",
        "plt.title(\"Tenure × Total Gasto (colorido por Churn)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "DhjbpOxc2VfB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop rows where y is NaN\n",
        "not_nan_mask = ~np.isnan(y)\n",
        "X = X[not_nan_mask]\n",
        "y = y[not_nan_mask]\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.3, random_state=42, stratify=y\n",
        "    )\n",
        "\n",
        "print(\"Shape final:\", X.shape)\n",
        "print(\"Proporção de Churn:\", y.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "9jjeyITR2f36",
        "outputId": "07ab2541-2143-4125-c70b-364896a8797c"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape final: (7043, 13825)\n",
            "Proporção de Churn: 0.2653698707936959\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e585a997"
      },
      "source": [
        "pipe_rf = Pipeline([\n",
        "    (\"scaler\", StandardScaler(with_mean=False)),\n",
        "    (\"clf\", RandomForestClassifier(random_state=42))\n",
        "])\n",
        "\n",
        "pipe_rf.fit(X_train, y_train)\n",
        "y_pred_rf = pipe_rf.predict(X_test)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def avaliar(y_true, y_pred):\n",
        "    return {\n",
        "        \"Acurácia\": accuracy_score(y_true, y_pred),\n",
        "        \"Precisão\": precision_score(y_true, y_pred),\n",
        "        \"Recall\": recall_score(y_true, y_pred),\n",
        "        \"F1\": f1_score(y_true, y_pred),\n",
        "        \"MatrizConfusao\": confusion_matrix(y_true, y_pred)\n",
        "    }\n",
        "\n",
        "res_lr = avaliar(y_test, y_pred_lr)\n",
        "res_rf = avaliar(y_test, y_pred_rf)\n",
        "\n",
        "print(\"=== Regressão Logística ===\")\n",
        "print(res_lr)\n",
        "print(\"\\n=== Random Forest ===\")\n",
        "print(res_rf)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "kBxcy-cs2-Ym",
        "outputId": "e071e7ad-141a-4c62-cfd7-5513c3f04178"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== Regressão Logística ===\n",
            "{'Acurácia': 0.7666824420255561, 'Precisão': 0.7125, 'Recall': 0.20320855614973263, 'F1': 0.31622746185852985, 'MatrizConfusao': array([[1506,   46],\n",
            "       [ 447,  114]])}\n",
            "\n",
            "=== Random Forest ===\n",
            "{'Acurácia': 0.7889256980596309, 'Precisão': 0.6517150395778364, 'Recall': 0.44028520499108736, 'F1': 0.5255319148936171, 'MatrizConfusao': array([[1420,  132],\n",
            "       [ 314,  247]])}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coefs = pd.Series(pipe_lr.named_steps[\"clf\"].coef_[0], index=X.columns)\n",
        "print(\"\\nTop 10 coeficientes (Regressão Logística):\")\n",
        "print(coefs.sort_values(key=lambda s: abs(s), ascending=False).head(10))\n",
        "\n",
        "importances = pd.Series(pipe_rf.named_steps[\"clf\"].feature_importances_, index=X.columns)\n",
        "print(\"\\nTop 10 importâncias (Random Forest):\")\n",
        "print(importances.sort_values(ascending=False).head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "5rRNUqhJ3Gex",
        "outputId": "a61f69c1-c8dc-4f26-9925-00a1dd55f6d3"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top 10 coeficientes (Regressão Logística):\n",
            "customer.tenure                          -0.725725\n",
            "account.Contract_Two year                -0.453518\n",
            "account.Contract_One year                -0.390158\n",
            "internet.TechSupport_Yes                 -0.378981\n",
            "internet.InternetService_Fiber optic      0.369940\n",
            "internet.OnlineSecurity_Yes              -0.366839\n",
            "account.PaymentMethod_Electronic check    0.332959\n",
            "phone.PhoneService_Yes                   -0.268849\n",
            "internet.OnlineBackup_Yes                -0.257512\n",
            "customer.Partner_Yes                     -0.253130\n",
            "dtype: float64\n",
            "\n",
            "Top 10 importâncias (Random Forest):\n",
            "customer.tenure                           0.082274\n",
            "account.Charges.Monthly                   0.054629\n",
            "account.Contract_Two year                 0.027217\n",
            "account.PaymentMethod_Electronic check    0.022263\n",
            "internet.InternetService_Fiber optic      0.021775\n",
            "account.Contract_One year                 0.018786\n",
            "internet.TechSupport_Yes                  0.017079\n",
            "internet.OnlineSecurity_Yes               0.015593\n",
            "account.PaperlessBilling_Yes              0.014140\n",
            "internet.OnlineBackup_Yes                 0.013005\n",
            "dtype: float64\n"
          ]
        }
      ]
    }
  ]
}